# streamlit_app.py
from __future__ import annotations
import sys
import os
from pathlib import Path
from decimal import Decimal
from datetime import datetime
import streamlit as st
import pandas as pd
import altair as alt

# =================================================================================
# === KH·∫ÆC PH·ª§C L·ªñI MODULE NOT FOUND
# =================================================================================
try:
    PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", ".."))
    if PROJECT_ROOT not in sys.path:
        sys.path.insert(0, PROJECT_ROOT)
except Exception:
    if "." not in sys.path:
        sys.path.insert(0, ".")

# --- Import c√°c module c·ªßa d·ª± √°n ---
try:
    from src.inventory.category_manager import CategoryManager
    from src.inventory.product_manager import ProductManager
    from src.sales.transaction_manager import TransactionManager
    from src.report_and_sreach.sreach import SearchEngine
    from src.report_and_sreach.report import (
        generate_low_stock_alerts,
        format_alerts_text,
        compute_financial_summary,
        write_low_stock_alerts,
        export_alerts_xlsx
    )
    from src.utils.time_zone import VN_TZ
except ImportError as e:
    st.error(
        "**L·ªói kh√¥ng t√¨m th·∫•y module `src`!**\n\n"
        "Vui l√≤ng ƒë·∫£m b·∫£o r·∫±ng:\n"
        "1. B·∫°n ƒëang ch·∫°y l·ªánh `streamlit run` t·ª´ th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n.\n"
        "2. C·∫•u tr√∫c th∆∞ m·ª•c c·ªßa b·∫°n c√≥ d·∫°ng `project_root/src/`."
    )
    st.exception(e)
    st.stop()

# --- C·∫•u h√¨nh v√† kh·ªüi t·∫°o c√°c ƒë·ªëi t∆∞·ª£ng qu·∫£n l√Ω ---
DATA_DIR = Path("data")
REPORTS_DIR = Path("reports")
DATA_DIR.mkdir(exist_ok=True)
REPORTS_DIR.mkdir(exist_ok=True)

# T·ª™ ƒêI·ªÇN D·ªäCH T√äN C·ªòT ƒê·ªÇ VI·ªÜT H√ìA GIAO DI·ªÜN
COLUMN_TRANSLATIONS = {
    "product_id": "M√£ SP",
    "name": "T√™n s·∫£n ph·∫©m",
    "category": "Danh m·ª•c",
    "cost_price": "Gi√° nh·∫≠p",
    "sell_price": "Gi√° b√°n",
    "stock_quantity": "T·ªìn kho",
    "min_threshold": "Ng∆∞·ª°ng",
    "unit": "ƒê∆°n v·ªã",
    "created_date": "Ng√†y t·∫°o",
    "last_updated": "C·∫≠p nh·∫≠t l·∫ßn cu·ªëi",
    "transaction_id": "M√£ Giao d·ªãch",
    "trans_type": "Lo·∫°i Giao d·ªãch",
    "quantity": "S·ªë l∆∞·ª£ng",
    "date": "Ng√†y Giao d·ªãch",
    "note": "Ghi ch√∫",
    "revenue": "Doanh thu",
    "quantity_sold": "SL ƒë√£ b√°n",
    "profit": "L·ª£i nhu·∫≠n"
}


@st.cache_resource
def get_managers():
    category_mgr = CategoryManager(str(DATA_DIR / "categories.json"))
    product_mgr = ProductManager(str(DATA_DIR / "products.json"), category_mgr=category_mgr)
    transaction_mgr = TransactionManager(str(DATA_DIR / "transactions.csv"), product_mgr=product_mgr)
    return category_mgr, product_mgr, transaction_mgr


cm, pm, tm, se = get_managers()


def fmt_vnd(v):
    try:
        return f"{int(v):,}"
    except:
        return str(v)


# =================================================================================
# === GIAO DI·ªÜN STREAMLIT
# =================================================================================

st.set_page_config(page_title="Qu·∫£n L√Ω Si√™u Th·ªã Mini", layout="wide", initial_sidebar_state="expanded")

# --- Sidebar ---
with st.sidebar:
    st.title("üè™ Si√™u Th·ªã Mini")
    menu_options = [
        "üìä T·ªïng quan",
        "üì¶ Qu·∫£n l√Ω S·∫£n ph·∫©m",
        "üöö Giao d·ªãch & L·ªãch s·ª≠",
        "üìà B√°o c√°o Chi ti·∫øt",
        "üì• Xu·∫•t B√°o c√°o & T·∫£i v·ªÅ",
        "‚öôÔ∏è C√†i ƒë·∫∑t"
    ]
    captions = [
        "Dashboard",
        "Th√™m, s·ª≠a, x√≥a s·∫£n ph·∫©m",
        "Nh·∫≠p/xu·∫•t kho",
        "Xem doanh thu v√† t·ªìn kho",
        "L∆∞u file Excel, CSV, TXT",
        "Qu·∫£n l√Ω danh m·ª•c"
    ]
    menu = st.radio("Ch·ª©c nƒÉng ch√≠nh", options=menu_options, captions=captions)
    st.info(f"üóìÔ∏è H√¥m nay: {datetime.now(VN_TZ).strftime('%d/%m/%Y')}")

# =================================================================================
# === TRANG T·ªîNG QUAN (DASHBOARD)
# =================================================================================
if menu == "üìä T·ªïng quan":
    st.title("üìä Dashboard T·ªïng Quan")

    total_products = len(pm.list_products())
    total_transactions_month = len([t for t in tm.list_transactions() if t.date.month == datetime.now().month])
    alerts = generate_low_stock_alerts(pm, tm)
    low_stock_count = len(alerts.get("low_stock", []))
    out_of_stock_count = len(alerts.get("out_of_stock", []))

    col1, col2, col3, col4 = st.columns(4)
    col1.metric("T·ªïng s·ªë s·∫£n ph·∫©m", f"{total_products} SP")
    col2.metric("Giao d·ªãch th√°ng n√†y", f"{total_transactions_month} GD")
    col3.metric("S·∫Øp h·∫øt h√†ng", f"{low_stock_count} SP", delta_color="inverse")
    col4.metric("H·∫øt h√†ng", f"{out_of_stock_count} SP", delta_color="inverse")

    st.markdown("---")

    with st.container(border=True):
        st.subheader("‚ö†Ô∏è C·∫£nh b√°o t·ªìn kho")
        if not low_stock_count and not out_of_stock_count:
            st.success("üëç T·ªìn kho ƒëang ·ªü m·ª©c an to√†n.")
        else:
            st.text_area("Chi ti·∫øt", value=format_alerts_text(alerts), height=250, disabled=True)

# =================================================================================
# === TRANG QU·∫¢N L√ù S·∫¢N PH·∫®M
# =================================================================================
elif menu == "üì¶ Qu·∫£n l√Ω S·∫£n ph·∫©m":
    st.title("üì¶ Qu·∫£n l√Ω S·∫£n ph·∫©m")

    # ƒê·ªïi t√™n tab ƒë·∫ßu ti√™n ƒë·ªÉ bao g·ªìm c·∫£ T√¨m ki·∫øm
    tab_list_search, tab_add, tab_delete = st.tabs(["üìú Danh s√°ch & T√¨m ki·∫øm", "‚ûï Th√™m m·ªõi", "‚ùå X√≥a"])

    with tab_list_search:
        st.subheader("Xem to√†n b·ªô ho·∫∑c t√¨m ki·∫øm s·∫£n ph·∫©m")

        # Th√™m √¥ t√¨m ki·∫øm
        keyword = st.text_input(
            "Nh·∫≠p M√£ SP, T√™n, ho·∫∑c Danh m·ª•c ƒë·ªÉ t√¨m ki·∫øm:",
            placeholder="V√≠ d·ª•: B√°nh m√¨, SP001, Th·ª±c ph·∫©m..."
        )

        # Logic hi·ªÉn th·ªã danh s√°ch d·ª±a tr√™n t·ª´ kh√≥a
        if keyword:
            # S·ª≠ d·ª•ng SearchEngine ƒë·ªÉ c√≥ k·∫øt qu·∫£ t·ªët nh·∫•t
            search_results = se.search_products(keyword, fuzzy=True)
            st.write(f"T√¨m th·∫•y **{search_results['total']}** k·∫øt qu·∫£ cho t·ª´ kh√≥a **'{keyword}'**.")
            products_to_display = search_results['results']
        else:
            # N·∫øu kh√¥ng c√≥ t·ª´ kh√≥a, hi·ªÉn th·ªã to√†n b·ªô
            products_to_display = pm.list_products()

        # Hi·ªÉn th·ªã b·∫£ng k·∫øt qu·∫£
        if products_to_display:
            # C·∫ßn chu·∫©n h√≥a v√¨ k·∫øt qu·∫£ t·ª´ search engine l√† dict, t·ª´ product manager l√† object
            products_as_dicts = [p if isinstance(p, dict) else p.to_dict() for p in products_to_display]
            products_df = pd.DataFrame(products_as_dicts)
            st.dataframe(products_df.rename(columns=COLUMN_TRANSLATIONS), use_container_width=True, hide_index=True)
        else:
            # Ch·ªâ th√¥ng b√°o kh√¥ng c√≥ k·∫øt qu·∫£ khi ng∆∞·ªùi d√πng ƒë√£ t√¨m ki·∫øm
            if keyword:
                st.info("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p.")
            else:
                st.info("Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o trong kho.")

    with tab_add:
        # ... (code c·ªßa tab Th√™m m·ªõi gi·ªØ nguy√™n)
        st.subheader("Th√™m s·∫£n ph·∫©m m·ªõi")
        with st.form("add_product_form"):
            pid = st.text_input("M√£ SP (product_id)")
            name = st.text_input("T√™n s·∫£n ph·∫©m")
            cat = st.selectbox("Danh m·ª•c", options=(cm.get_all_names() or ["(ch∆∞a c√≥)"]))
            unit = st.text_input("ƒê∆°n v·ªã", value="c√°i")
            c1, c2 = st.columns(2)
            cost = c1.number_input("Gi√° nh·∫≠p", min_value=0, step=1000)
            sell = c2.number_input("Gi√° b√°n", min_value=0, step=1000)
            c3, c4 = st.columns(2)
            qty = c3.number_input("T·ªìn kho ban ƒë·∫ßu", min_value=0, step=1)
            thr = c4.number_input("Ng∆∞·ª°ng c·∫£nh b√°o", min_value=0, step=1)
            submitted = st.form_submit_button("Th√™m s·∫£n ph·∫©m")
            if submitted:
                try:
                    pm.add_product(pid, name, cat, Decimal(cost), Decimal(sell), qty, thr, unit)
                    st.success(f"Th√™m s·∫£n ph·∫©m '{name}' th√†nh c√¥ng!")
                    st.rerun()
                except Exception as e:
                    st.error(f"L·ªói: {e}")

    with tab_delete:
        # ... (code c·ªßa tab X√≥a gi·ªØ nguy√™n)
        st.subheader("X√≥a s·∫£n ph·∫©m")
        all_pids = [p.product_id for p in pm.list_products()]
        pid_to_delete = st.selectbox("Ch·ªçn s·∫£n ph·∫©m c·∫ßn x√≥a", options=all_pids)
        if st.button("‚ùå X√≥a s·∫£n ph·∫©m ƒë√£ ch·ªçn", type="primary"):
            try:
                pm.delete_product(pid_to_delete)
                st.success(f"ƒê√£ x√≥a s·∫£n ph·∫©m {pid_to_delete}.")
                st.rerun()
            except Exception as e:
                st.error(f"L·ªói: {e}")

# =================================================================================
# === TRANG GIAO D·ªäCH
# =================================================================================
elif menu == "üöö Giao d·ªãch & L·ªãch s·ª≠":
    st.title("üöö Nh·∫≠p/Xu·∫•t kho")
    c1, c2 = st.columns([1, 2])

    with c1:
        with st.container(border=True):
            st.subheader("T·∫°o giao d·ªãch m·ªõi")
            all_pids = [p.product_id for p in pm.list_products()]
            pid = st.selectbox("S·∫£n ph·∫©m", options=all_pids)
            ttype = st.radio("Lo·∫°i giao d·ªãch", ["IMPORT", "EXPORT"], horizontal=True, captions=["Nh·∫≠p kho", "Xu·∫•t kho"])
            qty = st.number_input("S·ªë l∆∞·ª£ng", min_value=1, step=1)
            note = st.text_area("Ghi ch√∫")

            if st.button("Th·ª±c hi·ªán giao d·ªãch", type="primary", use_container_width=True):
                try:
                    tx = tm.add_transaction(pid, ttype, qty, note)
                    st.success(f"Giao d·ªãch {tx.transaction_id} th√†nh c√¥ng!")
                    st.rerun()
                except Exception as e:
                    st.error(f"L·ªói: {e}")

    with c2:
        st.subheader("L·ªãch s·ª≠ giao d·ªãch g·∫ßn ƒë√¢y")
        transactions_df = pd.DataFrame([t.to_dict() for t in tm.list_transactions()])
        # √Åp d·ª•ng Vi·ªát h√≥a tr∆∞·ªõc khi hi·ªÉn th·ªã
        st.dataframe(
            transactions_df.sort_values(by="date", ascending=False).rename(columns=COLUMN_TRANSLATIONS),
            use_container_width=True,
            hide_index=True
        )

# =================================================================================
# === TRANG B√ÅO C√ÅO CHI TI·∫æT
# =================================================================================
elif menu == "üìà B√°o c√°o Chi ti·∫øt":
    st.title("üìà B√°o c√°o Doanh thu & T·ªìn kho")
    now = datetime.now(VN_TZ)
    c1, c2 = st.columns(2)
    year = c1.number_input("NƒÉm", value=now.year, step=1)
    month = c2.number_input("Th√°ng", min_value=1, max_value=12, value=now.month)

    if st.button("Xem b√°o c√°o", type="primary"):
        try:
            summary = compute_financial_summary(pm, tm, month=month, year=year)

            st.subheader(f"B√°o c√°o t√†i ch√≠nh th√°ng {month}/{year}")

            m1, m2, m3 = st.columns(3)
            m1.metric("T·ªïng doanh thu", f"{fmt_vnd(summary.get('total_revenue', 0))} VND")
            m2.metric("T·ªïng v·ªën", f"{fmt_vnd(summary.get('total_cost', 0))} VND")
            m3.metric("L·ª£i nhu·∫≠n", f"{fmt_vnd(summary.get('total_profit', 0))} VND")

            st.markdown("---")

            by_cat = summary.get("by_category", {})
            top_sellers = summary.get("top_sellers", [])

            if not by_cat:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu doanh thu trong th√°ng n√†y ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì.")
            else:
                # Chu·∫©n b·ªã DataFrame v√† Vi·ªát h√≥a c·ªôt
                df_cat = pd.DataFrame(
                    [{"category": k, "revenue": float(v.get("revenue", 0))} for k, v in by_cat.items()])
                df_cat_display = df_cat.rename(columns=COLUMN_TRANSLATIONS)

                df_top = pd.DataFrame(top_sellers)
                if not df_top.empty:
                    df_top["revenue"] = pd.to_numeric(df_top["revenue"])
                df_top_display = df_top.rename(columns=COLUMN_TRANSLATIONS)

                # Bi·ªÉu ƒë·ªì Doanh thu theo danh m·ª•c
                chart_cat = alt.Chart(df_cat_display).mark_bar().encode(
                    x=alt.X('Danh m·ª•c:N', sort='-y', title='Danh m·ª•c'),
                    y=alt.Y('Doanh thu:Q', title='Doanh thu (VND)'),
                    tooltip=['Danh m·ª•c', 'Doanh thu']
                ).properties(title=f'Doanh thu theo danh m·ª•c - Th√°ng {month}/{year}')

                # Bi·ªÉu ƒë·ªì Top s·∫£n ph·∫©m b√°n ch·∫°y
                chart_top = alt.Chart(df_top_display).mark_bar().encode(
                    x=alt.X('Doanh thu:Q', title='Doanh thu (VND)'),
                    y=alt.Y('T√™n s·∫£n ph·∫©m:N', sort='-x', title='S·∫£n ph·∫©m'),
                    tooltip=['T√™n s·∫£n ph·∫©m', 'Doanh thu', 'SL ƒë√£ b√°n']
                ).properties(title=f'Top s·∫£n ph·∫©m b√°n ch·∫°y - Th√°ng {month}/{year}')

                st.altair_chart(chart_cat, use_container_width=True)
                st.altair_chart(chart_top, use_container_width=True)

        except Exception as e:
            st.error("L·ªói khi t·∫°o b√°o c√°o")
            st.exception(e)

# =================================================================================
# === TRANG XU·∫§T B√ÅO C√ÅO & T·∫¢I V·ªÄ
# =================================================================================
elif menu == "üì• Xu·∫•t B√°o c√°o & T·∫£i v·ªÅ":
    st.title("üì• Xu·∫•t B√°o c√°o & T·∫£i v·ªÅ")
    st.info("T·∫°i ƒë√¢y b·∫°n c√≥ th·ªÉ t·∫°o v√† t·∫£i c√°c file b√°o c√°o quan tr·ªçng v·ªÅ m√°y t√≠nh.")

    # --- 1. B√°o c√°o C·∫£nh b√°o T·ªìn kho ---
    with st.container(border=True):
        st.subheader("1. B√°o c√°o C·∫£nh b√°o T·ªìn kho")
        st.markdown("Xu·∫•t danh s√°ch c√°c s·∫£n ph·∫©m ƒë√£ h·∫øt h√†ng ho·∫∑c s·∫Øp h·∫øt h√†ng.")
        if st.button("üö® T·∫°o & T·∫£i file C·∫£nh b√°o"):
            try:
                alerts = generate_low_stock_alerts(pm, tm)

                # T·∫°o c√°c file tr√™n server
                txt_path = REPORTS_DIR / "low_stock_alert.txt"
                csv_path = REPORTS_DIR / "low_stock_alert.csv"
                xlsx_path = REPORTS_DIR / "low_stock_alert.xlsx"

                write_low_stock_alerts(alerts, out_txt_path=str(txt_path), out_csv_path=str(csv_path))
                export_alerts_xlsx(alerts, out_xlsx_path=str(xlsx_path))

                st.success("‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng c√°c file b√°o c√°o c·∫£nh b√°o!")

                # Hi·ªÉn th·ªã c√°c n√∫t t·∫£i v·ªÅ
                c1, c2, c3 = st.columns(3)
                with c1, open(txt_path, "rb") as f:
                    st.download_button("üì• T·∫£i file .txt", f, file_name="low_stock_alert.txt")
                with c2, open(csv_path, "rb") as f:
                    st.download_button("üì• T·∫£i file .csv", f, file_name="low_stock_alert.csv", mime="text/csv")
                with c3, open(xlsx_path, "rb") as f:
                    st.download_button("üì• T·∫£i file .xlsx", f, file_name="low_stock_alert.xlsx")

            except Exception as e:
                st.error("L·ªói khi t·∫°o b√°o c√°o c·∫£nh b√°o.")
                st.exception(e)

    # --- 2. B√°o c√°o Doanh thu theo Th√°ng ---
    with st.container(border=True):
        st.subheader("2. B√°o c√°o Doanh thu theo Th√°ng")
        st.markdown("Xu·∫•t file CSV chi ti·∫øt doanh thu, chi ph√≠, l·ª£i nhu·∫≠n trong m·ªôt th√°ng c·ª• th·ªÉ.")

        # S·ª¨A L·ªñI ·ªû ƒê√ÇY: D√πng st.session_state ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i

        # Kh·ªüi t·∫°o session_state n·∫øu ch∆∞a c√≥
        if 'sales_report_path' not in st.session_state:
            st.session_state.sales_report_path = None

        with st.form("sales_report_form"):
            now = datetime.now(VN_TZ)
            c1, c2 = st.columns(2)
            year = c1.number_input("Ch·ªçn NƒÉm", value=now.year, step=1)
            month = c2.number_input("Ch·ªçn Th√°ng", min_value=1, max_value=12, value=now.month)

            submitted = st.form_submit_button("üìà T·∫°o B√°o c√°o Doanh thu")
            if submitted:
                try:
                    # Khi nh·∫•n n√∫t, ta ch·ªâ t·∫°o file v√† L∆ØU ƒê∆Ø·ªúNG D·∫™N v√†o session_state
                    summary = compute_financial_summary(pm, tm, month=month, year=year, out_dir=REPORTS_DIR)
                    file_name = f"sales_summary_{month:02d}_{year}.csv"
                    file_path = REPORTS_DIR / file_name

                    st.session_state.sales_report_path = str(file_path)  # L∆∞u ƒë∆∞·ªùng d·∫´n
                    st.success(f"‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng b√°o c√°o cho th√°ng {month}/{year}! Nh·∫•n n√∫t 'T·∫£i v·ªÅ' b√™n d∆∞·ªõi.")
                except Exception as e:
                    st.error("L·ªói khi t·∫°o b√°o c√°o doanh thu.")
                    st.exception(e)
                    st.session_state.sales_report_path = None  # X√≥a tr·∫°ng th√°i n·∫øu c√≥ l·ªói

        # ƒê·∫∂T N√öT DOWNLOAD B√äN NGO√ÄI FORM
        # N√∫t n√†y ch·ªâ hi·ªÉn th·ªã n·∫øu c√≥ m·ªôt b√°o c√°o h·ª£p l·ªá ƒë√£ ƒë∆∞·ª£c t·∫°o
        if st.session_state.sales_report_path and Path(st.session_state.sales_report_path).exists():
            file_path = Path(st.session_state.sales_report_path)
            with open(file_path, "rb") as f:
                st.download_button(
                    label=f"üì• T·∫£i v·ªÅ b√°o c√°o th√°ng {file_path.stem.split('_')[-2]}/{file_path.stem.split('_')[-1]} (.csv)",
                    data=f,
                    file_name=file_path.name,
                    mime="text/csv"
                )

# =================================================================================
# === TRANG C√ÄI ƒê·∫∂T
# =================================================================================
elif menu == "‚öôÔ∏è C√†i ƒë·∫∑t":
    st.title("‚öôÔ∏è C√†i ƒë·∫∑t h·ªá th·ªëng")
    with st.container(border=True):
        st.subheader("Qu·∫£n l√Ω danh m·ª•c")

        current_cats = cm.get_all_names()
        st.write("C√°c danh m·ª•c hi·ªán c√≥:", ", ".join(current_cats) if current_cats else "Ch∆∞a c√≥ danh m·ª•c n√†o.")

        c1, c2 = st.columns(2)
        with c1:
            new_cat = st.text_input("T√™n danh m·ª•c m·ªõi")
            if st.button("Th√™m danh m·ª•c"):
                if new_cat:
                    try:
                        cm.add_category(new_cat)
                        st.success(f"ƒê√£ th√™m '{new_cat}'")
                        st.rerun()
                    except Exception as e:
                        st.error(e)
        with c2:
            cat_to_del = st.selectbox("Ch·ªçn danh m·ª•c ƒë·ªÉ x√≥a", options=current_cats)
            if st.button("X√≥a danh m·ª•c", type="primary"):
                try:
                    cm.remove_category(cat_to_del)
                    st.success(f"ƒê√£ x√≥a '{cat_to_del}'")
                    st.rerun()
                except Exception as e:
                    st.error(e)