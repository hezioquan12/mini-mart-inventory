# test_streamlit.py
from __future__ import annotations
import sys, os
from pathlib import Path
from decimal import Decimal
from datetime import datetime
import traceback

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# ----------------------------
# Fix ModuleNotFoundError
# ----------------------------
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", ".."))
if PROJECT_ROOT not in sys.path:
    sys.path.insert(0, PROJECT_ROOT)

# ----------------------------
# Import modules d·ª± √°n
# ----------------------------
try:
    from src.inventory.category_manager import CategoryManager
    from src.inventory.product_manager import ProductManager
    from src.sales.transaction_manager import TransactionManager
    from src.report_and_sreach.sreach import SearchEngine
    from src.report_and_sreach.report import (
        generate_low_stock_alerts,
        format_alerts_text,
        run_and_persist,
        compute_financial_summary,
        format_financial_summary_text
    )
    from src.utils.time_zone import VN_TZ
except Exception as e:
    st.error("Kh√¥ng import ƒë∆∞·ª£c module d·ª± √°n. Ki·ªÉm tra c·∫•u tr√∫c src / PYTHONPATH")
    st.exception(e)
    raise

# ----------------------------
# Paths & session managers
# ----------------------------
DATA_DIR = Path("data")
REPORTS_DIR = Path("reports")
DATA_DIR.mkdir(exist_ok=True)
REPORTS_DIR.mkdir(exist_ok=True)

def get_managers():
    if "category_mgr" not in st.session_state:
        st.session_state.category_mgr = CategoryManager(str(DATA_DIR / "categories.json"))
    if "product_mgr" not in st.session_state:
        st.session_state.product_mgr = ProductManager(str(DATA_DIR / "products.json"), category_mgr=st.session_state.category_mgr)
    if "transaction_mgr" not in st.session_state:
        st.session_state.transaction_mgr = TransactionManager(str(DATA_DIR / "transactions.csv"), product_mgr=st.session_state.product_mgr)
    if "search_engine" not in st.session_state:
        st.session_state.search_engine = SearchEngine(st.session_state.product_mgr, st.session_state.transaction_mgr)
    return st.session_state.category_mgr, st.session_state.product_mgr, st.session_state.transaction_mgr, st.session_state.search_engine

cm, pm, tm, se = get_managers()

# ----------------------------
# Helpers
# ----------------------------
def fmt_vnd(v):
    try:
        return f"{int(v):,}"
    except Exception:
        return str(v)

def normalize_search_results(results):
    normalized = []
    for p in results:
        if hasattr(p, "product_id"):
            normalized.append({
                "product_id": p.product_id,
                "name": p.name,
                "category": p.category,
                "cost_price": fmt_vnd(p.cost_price),
                "sell_price": fmt_vnd(p.sell_price),
                "stock_quantity": p.stock_quantity,
                "min_threshold": p.min_threshold,
                "unit": p.unit,
                "last_updated": getattr(p, "last_updated", ""),
            })
        elif isinstance(p, dict):
            normalized.append({
                "product_id": p.get("product_id", ""),
                "name": p.get("name", ""),
                "category": p.get("category", ""),
                "cost_price": fmt_vnd(p.get("cost_price", 0)),
                "sell_price": fmt_vnd(p.get("sell_price", 0)),
                "stock_quantity": p.get("stock_quantity", 0),
                "min_threshold": p.get("min_threshold", 0),
                "unit": p.get("unit", ""),
                "last_updated": p.get("last_updated", ""),
            })
    return normalized

def show_products_table(products):
    if not products:
        st.info("Kh√¥ng c√≥ s·∫£n ph·∫©m.")
        return

    rows = normalize_search_results(products)
    df = pd.DataFrame(rows)

    # ƒê·ªïi t√™n c·ªôt sang ti·∫øng Vi·ªát
    rename_columns = {
        "product_id": "M√£ SP",
        "name": "T√™n s·∫£n ph·∫©m",
        "category": "Danh m·ª•c",
        "cost_price": "Gi√° nh·∫≠p (VND)",
        "sell_price": "Gi√° b√°n (VND)",
        "stock_quantity": "T·ªìn kho",
        "min_threshold": "Ng∆∞·ª°ng c·∫£nh b√°o",
        "unit": "ƒê∆°n v·ªã",
        "last_updated": "C·∫≠p nh·∫≠t"
    }
    df.rename(columns=rename_columns, inplace=True)
    st.dataframe(df, use_container_width=True)
# ----------------------------
# Streamlit Layout
# ----------------------------
st.set_page_config(page_title="Qu·∫£n L√Ω Si√™u Th·ªã Mini", layout="wide")
st.title("Qu·∫£n L√Ω Kho S·∫£n Ph·∫©m")

menu = st.sidebar.selectbox("Ch·ªçn trang", ["Products", "Transactions", "Reports / Export", "Settings"])

# ------------------ Products ------------------
if menu == "Products":
    st.header("Qu·∫£n l√Ω s·∫£n ph·∫©m")
    col1, col2 = st.columns([2, 1])

    with col1:
        st.subheader("Danh s√°ch s·∫£n ph·∫©m")
        show_products_table(pm.list_products())
    with col2:
        st.subheader("Th√™m / C·∫≠p nh·∫≠t s·∫£n ph·∫©m")
        mode = st.selectbox("Ch·ªçn", ["Th√™m m·ªõi", "C·∫≠p nh·∫≠t"])
        pid = st.text_input("M√£ SP (product_id)")
        name = st.text_input("T√™n s·∫£n ph·∫©m")
        cat = st.selectbox("Danh m·ª•c", options=(cm.get_all_names() or ["(ch∆∞a c√≥ danh m·ª•c)"]))
        cost = st.text_input("Gi√° nh·∫≠p")
        sell = st.text_input("Gi√° b√°n")
        qty = st.number_input("T·ªìn kho", min_value=0, value=0, step=1)
        thr = st.number_input("Ng∆∞·ª°ng c·∫£nh b√°o", min_value=0, value=0, step=1)
        unit = st.text_input("ƒê∆°n v·ªã", value="c√°i")

        if st.button("Th·ª±c hi·ªán"):
            try:
                if mode == "Th√™m m·ªõi":
                    pm.add_product(pid, name, cat, Decimal(cost or "0"), Decimal(sell or "0"), int(qty), int(thr), unit)
                    st.success("Th√™m s·∫£n ph·∫©m th√†nh c√¥ng")
                else:
                    pm.update_product(pid, name=name, category=cat, cost_price=Decimal(cost or "0"), sell_price=Decimal(sell or "0"), stock_quantity=int(qty), min_threshold=int(thr), unit=unit)
                    st.success("C·∫≠p nh·∫≠t th√†nh c√¥ng")
            except Exception as e:
                st.error(f"L·ªói: {e}")
                st.exception(traceback.format_exc())

        st.markdown("---")
        st.subheader("X√≥a s·∫£n ph·∫©m")
        pid_del = st.text_input("M√£ SP c·∫ßn x√≥a", key="pid_del")
        if st.button("X√≥a"):
            try:
                pm.delete_product(pid_del)
                st.success("X√≥a th√†nh c√¥ng")
            except Exception as e:
                st.error(f"L·ªói: {e}")

        st.markdown("---")
        st.subheader("T√¨m ki·∫øm s·∫£n ph·∫©m")
        kw = st.text_input("T·ª´ kho√° t√¨m ki·∫øm")
        if st.button("Search"):
            try:
                if se:
                    res = se.search_products(kw)
                    st.write(f"T√¨m th·∫•y {res['total']} k·∫øt qu·∫£ (hi·ªÉn th·ªã {len(res['results'])})")
                    show_products_table(res['results'])
                else:
                    results = pm.search_products(kw)
                    show_products_table(results)
            except Exception as e:
                st.error(e)
                st.exception(traceback.format_exc())

# ------------------ Transactions ------------------
elif menu == "Transactions":
    st.header("Nh·∫≠p / Xu·∫•t / L·ªãch s·ª≠ giao d·ªãch")
    pid = st.text_input("M√£ SP")
    ttype = st.selectbox("Lo·∫°i", ["IMPORT", "EXPORT"])
    qty = st.number_input("S·ªë l∆∞·ª£ng", min_value=1, value=1)
    note = st.text_input("Ghi ch√∫")
    if st.button("Th√™m giao d·ªãch"):
        try:
            tx = tm.add_transaction(pid, ttype, int(qty), note=note)
            st.success(f"Th√™m giao d·ªãch {tx.transaction_id}")
        except Exception as e:
            st.error(e)
            st.exception(traceback.format_exc())

    st.subheader("L·ªãch s·ª≠ giao d·ªãch")
    tlist = tm.list_transactions()
    if not tlist:
        st.info("Kh√¥ng c√≥ giao d·ªãch")
    else:
        rows = []
        for t in tlist:
            rows.append({
                "tx_id": t.transaction_id,
                "product_id": t.product_id,
                "type": t.trans_type,
                "qty": t.quantity,
                "date": getattr(t, "date", ""),
                "note": t.note
            })
        st.table(rows)

elif menu == "Reports / Export":
    st.header("B√°o c√°o & Xu·∫•t d·ªØ li·ªáu")

    if st.button("Sinh c·∫£nh b√°o t·ªìn kho"):
        try:
            txt_path = REPORTS_DIR / "low_stock.txt"
            csv_path = REPORTS_DIR / "low_stock.csv"
            xlsx_path = REPORTS_DIR / "low_stock.xlsx"

            alerts = run_and_persist(pm, tm,
                                     out_txt_path=str(txt_path),
                                     out_csv_path=str(csv_path),
                                     out_xlsx_path=str(xlsx_path))

            st.text(format_alerts_text(alerts))
            st.success("‚úÖ ƒê√£ sinh c·∫£nh b√°o v√† xu·∫•t file")
            st.write(f"üìÇ File ƒë√£ l∆∞u trong th∆∞ m·ª•c: `{REPORTS_DIR.resolve()}`")

            # N√∫t t·∫£i CSV
            if csv_path.exists():
                with open(csv_path, "rb") as f_csv:
                    st.download_button(
                        label="üì• T·∫£i file CSV",
                        data=f_csv,
                        file_name="low_stock.csv",
                        mime="text/csv"
                    )

            # N√∫t t·∫£i Excel
            if xlsx_path.exists():
                with open(xlsx_path, "rb") as f_xlsx:
                    st.download_button(
                        label="üì• T·∫£i file Excel",
                        data=f_xlsx,
                        file_name="low_stock.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )

            # N√∫t t·∫£i TXT
            if txt_path.exists():
                with open(txt_path, "rb") as f_txt:
                    st.download_button(
                        label="üì• T·∫£i file TXT",
                        data=f_txt,
                        file_name="low_stock.txt",
                        mime="text/plain"
                    )

        except Exception as e:
            st.error(e)
            st.exception(traceback.format_exc())

    st.markdown("---")
    st.subheader("B√°o c√°o doanh thu theo th√°ng")

    coly, colm = st.columns(2)
    with coly:
        year = st.number_input("NƒÉm", value=datetime.now().year, step=1)
    with colm:
        month = st.number_input("Th√°ng", min_value=1, max_value=12, value=datetime.now().month)

    if st.button("T·∫°o b√°o c√°o & bi·ªÉu ƒë·ªì"):
        try:
            summary = compute_financial_summary(pm, tm, month=month, year=year)

            st.subheader(f"B√°o c√°o t√†i ch√≠nh th√°ng {month}/{year}")

            # T·ªïng h·ª£p
            st.write(f"**T·ªïng doanh thu:** {fmt_vnd(summary.get('total_revenue', 0))} VND")
            st.write(f"**T·ªïng chi ph√≠:** {fmt_vnd(summary.get('total_cost', 0))} VND")
            st.write(f"**T·ªïng l·ª£i nhu·∫≠n:** {fmt_vnd(summary.get('total_profit', 0))} VND")

            # -------- Bi·ªÉu ƒë·ªì 1: Bar chart Doanh thu & L·ª£i nhu·∫≠n theo danh m·ª•c --------
            by_cat = summary.get("by_category") or {}
            if by_cat:
                df_cat = pd.DataFrame([
                    {"Danh m·ª•c": k,
                     "Doanh thu": float(v.get("revenue", 0)),
                     "L·ª£i nhu·∫≠n": float(v.get("profit", 0))}
                    for k, v in by_cat.items()
                ])
                st.subheader("üìä Doanh thu & L·ª£i nhu·∫≠n theo danh m·ª•c")
                fig, ax = plt.subplots(figsize=(8, 4))
                df_cat.plot(kind="bar", x="Danh m·ª•c", y=["Doanh thu", "L·ª£i nhu·∫≠n"], ax=ax)
                ax.set_ylabel("VND")
                ax.set_title(f"Doanh thu & L·ª£i nhu·∫≠n th√°ng {month}/{year}")
                st.pyplot(fig)

            # -------- Bi·ªÉu ƒë·ªì 2: Line chart Xu h∆∞·ªõng doanh thu theo ng√†y --------
            st.subheader("üìà Xu h∆∞·ªõng doanh thu & l·ª£i nhu·∫≠n theo ng√†y")
            revenue_by_day = summary.get("revenue_by_day") or []
            if revenue_by_day:
                df_day = pd.DataFrame(revenue_by_day)
                fig2, ax2 = plt.subplots(figsize=(10, 4))
                df_day.plot(x="Ng√†y", y=["Doanh thu", "L·ª£i nhu·∫≠n"], kind="line", marker="o", ax=ax2)
                ax2.set_ylabel("VND")
                ax2.set_title(f"Xu h∆∞·ªõng doanh thu & l·ª£i nhu·∫≠n th√°ng {month}/{year}")
                st.pyplot(fig2)
            else:
                st.info("Kh√¥ng c√≥ d·ªØ li·ªáu xu h∆∞·ªõng ng√†y.")

            # -------- Bi·ªÉu ƒë·ªì 3: Pie chart T·ªâ l·ªá doanh thu theo danh m·ª•c --------
            st.subheader("ü•ß T·ªâ l·ªá doanh thu theo danh m·ª•c")
            if by_cat:
                fig3, ax3 = plt.subplots(figsize=(6, 6))
                ax3.pie(df_cat["Doanh thu"], labels=df_cat["Danh m·ª•c"], autopct="%1.1f%%", startangle=90)
                ax3.set_title("T·ªâ l·ªá doanh thu theo danh m·ª•c")
                st.pyplot(fig3)

            # -------- Bi·ªÉu ƒë·ªì 4: Horizontal bar chart Top s·∫£n ph·∫©m --------
            st.subheader("üèÜ Top s·∫£n ph·∫©m b√°n ch·∫°y")
            try:
                top_sellers = summary.get("top_sellers") or []
                st.write("üîç D·ªØ li·ªáu Top Sellers:", top_sellers)

                if top_sellers:
                    df_top = pd.DataFrame(top_sellers)
                    st.write("üìä DataFrame Top Sellers:", df_top.head())

                    if not df_top.empty and "revenue" in df_top.columns:
                        if "name" not in df_top.columns:
                            possible_name_cols = ["product_name", "T√™n s·∫£n ph·∫©m", "name_product"]
                            for col in possible_name_cols:
                                if col in df_top.columns:
                                    df_top.rename(columns={col: "name"}, inplace=True)
                                    break

                        df_top["revenue"] = pd.to_numeric(df_top["revenue"], errors="coerce").fillna(0)

                        if not df_top["revenue"].empty and df_top["revenue"].sum() > 0:
                            fig4, ax4 = plt.subplots(figsize=(8, 4))
                            df_top.sort_values("revenue", ascending=True).plot(
                                kind="barh", x="name", y="revenue", ax=ax4, color="skyblue"
                            )
                            ax4.set_xlabel("Doanh thu (VND)")
                            ax4.set_title("Top s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t")
                            st.pyplot(fig4)
                        else:
                            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu doanh thu h·ª£p l·ªá ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì.")
                    else:
                        st.info("Kh√¥ng c√≥ d·ªØ li·ªáu doanh thu ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì.")
                else:
                    st.info("Kh√¥ng c√≥ d·ªØ li·ªáu s·∫£n ph·∫©m b√°n ch·∫°y.")
            except Exception as e:
                st.error("L·ªói khi v·∫Ω bi·ªÉu ƒë·ªì Top Sellers")
                st.exception(traceback.format_exc())

        except Exception as e:
            st.error("L·ªói khi t·∫°o b√°o c√°o & bi·ªÉu ƒë·ªì")
            st.exception(traceback.format_exc())


# ------------------ Settings ------------------
elif menu == "Settings":
    st.header("C√†i ƒë·∫∑t")
    st.subheader("Danh m·ª•c hi·ªán c√≥")
    st.write(cm.get_all_names())
    new_cat = st.text_input("Th√™m danh m·ª•c m·ªõi")
    if st.button("Th√™m danh m·ª•c"):
        try:
            cm.add_category(new_cat)
            st.success("ƒê√£ th√™m danh m·ª•c")
        except Exception as e:
            st.error(e)

