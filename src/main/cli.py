#!/usr/bin/env python3
# src/cli/cli_vn.py
"""
Giao di·ªán d√≤ng l·ªánh (CLI) ti·∫øng Vi·ªát cho H·ªá th·ªëng Qu·∫£n l√Ω Kho Mini-Mart.

Phi√™n b·∫£n c·∫£i ti·∫øn:
- X·ª≠ l√Ω input an to√†n, ch·ªëng crash ch∆∞∆°ng tr√¨nh.
- T√°i c·∫•u tr√∫c code theo t·ª´ng ch·ª©c nƒÉng, d·ªÖ ƒë·ªçc, d·ªÖ b·∫£o tr√¨.
- Th·ªëng nh·∫•t logic, ch·ªâ s·ª≠ d·ª•ng c√°c h√†m t·ª´ module l√µi c·ªßa d·ª± √°n.
- C·∫£i thi·ªán hi·ªÉn th·ªã output cho c√°c b·∫£ng d·ªØ li·ªáu.
- Lo·∫°i b·ªè c√°c c·∫£nh b√°o t·ª´ linter.
"""

import sys
import traceback
from pathlib import Path
from datetime import datetime
from decimal import Decimal, InvalidOperation
from typing import Optional, List, Any, Dict


def run_cli_app():
    """
    H√†m ch√≠nh ch·ª©a to√†n b·ªô logic c·ªßa ·ª©ng d·ª•ng.
    H√†m n√†y ch·ªâ ƒë∆∞·ª£c g·ªçi khi t·∫•t c·∫£ c√°c module c·∫ßn thi·∫øt ƒë√£ ƒë∆∞·ª£c import th√†nh c√¥ng.
    """
    # --- C√°c import ph·ª• thu·ªôc ƒë∆∞·ª£c ƒë·∫∑t b√™n trong ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n ---
    from src.inventory.product_manager import ProductManager
    from src.inventory.category_manager import CategoryManager
    from src.sales.transaction_manager import TransactionManager
    from src.report_and_sreach.report import (
        generate_low_stock_alerts,
        export_alerts_xlsx,
        format_alerts_text,
        compute_financial_summary,
        format_financial_summary_text
    )
    from src.utils.time_zone import VN_TZ

    try:
        from openpyxl import Workbook
        HAS_OPENPYXL = True
    except ImportError:
        HAS_OPENPYXL = False

    # --- C·∫•u h√¨nh ƒë∆∞·ªùng d·∫´n ---

    # L·∫•y th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n (ƒëi l√™n 2 c·∫•p t·ª´ file .py hi·ªán t·∫°i)
    # Path(__file__) -> .../project_root/main/app.py
    # .parent        -> .../project_root/main
    # .parent        -> .../project_root
    project_root = Path(__file__).parent.parent.parent

    # ƒê·ªãnh nghƒ©a ƒë∆∞·ªùng d·∫´n d·ª±a tr√™n th∆∞ m·ª•c g·ªëc
    DATA_DIR = project_root / "data"
    REPORTS_DIR = project_root / "reports"

    # T·∫°o th∆∞ m·ª•c (n·∫øu ch∆∞a c√≥)
    DATA_DIR.mkdir(exist_ok=True)
    REPORTS_DIR.mkdir(exist_ok=True)

    # ===============================================
    # === C√ÅC H√ÄM PH·ª§ TR·ª¢ (HELPERS)
    # ===============================================

    def prompt_for_text(prompt: str, default: Optional[str] = None) -> str:
        """H·ªèi ng∆∞·ªùi d√πng v√† tr·∫£ v·ªÅ chu·ªói text ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch (strip)."""
        display_prompt = f"{prompt} [{default}]" if default is not None else prompt
        value = input(f"{display_prompt}: ").strip()
        if not value and default is not None:
            return default
        return value

    def prompt_for_int(prompt: str, default: Optional[int] = None) -> int:
        """H·ªèi ng∆∞·ªùi d√πng cho ƒë·∫øn khi nh·∫≠p v√†o m·ªôt s·ªë nguy√™n h·ª£p l·ªá."""
        while True:
            try:
                default_val = str(default) if default is not None else None
                value_str = prompt_for_text(prompt, default=default_val)
                if not value_str:
                    if default is not None: return default
                    raise ValueError("Gi√° tr·ªã kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
                return int(value_str)
            except (ValueError, TypeError):
                print("‚ùå Vui l√≤ng nh·∫≠p m·ªôt s·ªë nguy√™n h·ª£p l·ªá.")

    def prompt_for_decimal(prompt: str, default: Optional[Decimal] = None) -> Decimal:
        """H·ªèi ng∆∞·ªùi d√πng cho ƒë·∫øn khi nh·∫≠p v√†o m·ªôt s·ªë Decimal h·ª£p l·ªá."""
        while True:
            try:
                default_val = str(default) if default is not None else None
                value_str = prompt_for_text(prompt, default=default_val)
                if not value_str:
                    if default is not None: return default
                    raise ValueError("Gi√° tr·ªã kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
                return Decimal(value_str.replace(",", "."))
            except (InvalidOperation, ValueError):
                print("‚ùå Vui l√≤ng nh·∫≠p m·ªôt s·ªë h·ª£p l·ªá (v√≠ d·ª•: 50000.5).")

    def fmt_vnd(x: Any) -> str:
        """ƒê·ªãnh d·∫°ng s·ªë th√†nh chu·ªói ti·ªÅn t·ªá VND."""
        try:
            return f"{int(Decimal(str(x))):,}"
        except Exception:
            return str(x)

    def status_for_product(p) -> str:
        """Tr·∫£ v·ªÅ tr·∫°ng th√°i t·ªìn kho c·ªßa s·∫£n ph·∫©m."""
        if p.stock_quantity <= 0: return "H·∫æT H√ÄNG"
        if p.stock_quantity <= p.min_threshold: return "S·∫ÆP H·∫æT"
        return "B√åNH TH∆Ø·ªúNG"

    def print_products_table(products: List[Any]) -> None:
        """In danh s√°ch s·∫£n ph·∫©m ra console d∆∞·ªõi d·∫°ng b·∫£ng."""
        if not products:
            print("\n(Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o)")
            return
        print(
            f"\n{'M√£ SP':<10} {'T√™n':<30} {'Danh m·ª•c':<15} {'Gi√° nh·∫≠p':>12} {'Gi√° b√°n':>12} {'T·ªìn':>6} {'Ng∆∞·ª°ng':>7} {'Tr·∫°ng th√°i':>12}")
        print("-" * 110)
        for p in products:
            print(
                f"{p.product_id:<10} {p.name[:30]:<30} {p.category[:15]:<15} {fmt_vnd(p.cost_price):>12} {fmt_vnd(p.sell_price):>12} {p.stock_quantity:>6} {p.min_threshold:>7} {status_for_product(p):>12}")
        print()

    def print_transactions_table(transactions: List[Any]) -> None:
        """In danh s√°ch giao d·ªãch ra console d∆∞·ªõi d·∫°ng b·∫£ng."""
        if not transactions:
            print("\n(Kh√¥ng c√≥ giao d·ªãch n√†o)")
            return
        print(f"\n{'ID Giao d·ªãch':<38} {'M√£ SP':<10} {'Lo·∫°i':<8} {'S·ªë l∆∞·ª£ng':>10} {'Ng√†y':<28} {'Ghi ch√∫'}")
        print("-" * 120)
        # S·∫Øp x·∫øp giao d·ªãch theo ng√†y m·ªõi nh·∫•t l√™n ƒë·∫ßu
        for t in sorted(transactions, key=lambda x: x.date, reverse=True):
            date_str = t.date.astimezone(VN_TZ).strftime('%Y-%m-%d %H:%M:%S') if t.date else 'N/A'
            print(
                f"{t.transaction_id:<38} {t.product_id:<10} {t.trans_type:<8} {t.quantity:>10} {date_str:<28} {t.note}")
        print()

    # ===============================================
    # === KH·ªûI T·∫†O C√ÅC ƒê·ªêI T∆Ø·ª¢NG QU·∫¢N L√ù (MANAGERS)
    # ===============================================
    category_mgr = CategoryManager(str(DATA_DIR / "categories.json"))
    product_mgr = ProductManager(str(DATA_DIR / "products.json"), category_mgr=category_mgr)
    transaction_mgr = TransactionManager(str(DATA_DIR / "transactions.csv"), product_mgr=product_mgr)

    # ===============================================
    # === C√ÅC H√ÄM X·ª¨ L√ù T√ÅC V·ª§ (ACTION HANDLERS)
    # ===============================================

    def _handle_add_product():
        print("\n--- 1.1 Th√™m s·∫£n ph·∫©m m·ªõi ---")
        try:
            pid = prompt_for_text("M√£ SP")
            if not pid:
                print("‚ùóÔ∏è M√£ SP kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
                return
            name = prompt_for_text("T√™n s·∫£n ph·∫©m")
            cat = prompt_for_text("Danh m·ª•c")
            cost = prompt_for_decimal("Gi√° nh·∫≠p", default=Decimal("0"))
            sell = prompt_for_decimal("Gi√° b√°n", default=cost)
            qty = prompt_for_int("S·ªë l∆∞·ª£ng t·ªìn", default=0)
            thr = prompt_for_int("Ng∆∞·ª°ng c·∫£nh b√°o", default=0)
            unit = prompt_for_text("ƒê∆°n v·ªã", default="c√°i")

            product_mgr.add_product(pid, name, cat, cost, sell, qty, thr, unit)
            print("‚úÖ Th√™m s·∫£n ph·∫©m th√†nh c√¥ng.")
        except (ValueError, InvalidOperation) as e:
            print(f"‚ùå L·ªói: {e}")

    def _handle_update_product():
        print("\n--- 1.2 S·ª≠a th√¥ng tin s·∫£n ph·∫©m ---")
        pid = prompt_for_text("M√£ SP c·∫ßn s·ª≠a")
        if not pid: return
        try:
            p = product_mgr.get_product(pid)
            print("üí° ƒê·ªÉ tr·ªëng v√† nh·∫•n Enter ƒë·ªÉ gi·ªØ nguy√™n gi√° tr·ªã c≈©.")

            changes = {
                "name": prompt_for_text("T√™n", default=p.name),
                "category": prompt_for_text("Danh m·ª•c", default=p.category),
                "cost_price": prompt_for_decimal("Gi√° nh·∫≠p", default=p.cost_price),
                "sell_price": prompt_for_decimal("Gi√° b√°n", default=p.sell_price),
                "stock_quantity": prompt_for_int("S·ªë l∆∞·ª£ng t·ªìn", default=p.stock_quantity),
                "min_threshold": prompt_for_int("Ng∆∞·ª°ng", default=p.min_threshold),
                "unit": prompt_for_text("ƒê∆°n v·ªã", default=p.unit)
            }
            product_mgr.update_product(pid, **changes)
            print("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng.")
        except (ValueError, InvalidOperation) as e:
            print(f"‚ùå L·ªói: {e}")

    def _handle_delete_product():
        print("\n--- 1.3 X√≥a s·∫£n ph·∫©m ---")
        pid = prompt_for_text("M√£ SP c·∫ßn x√≥a")
        if not pid: return
        try:
            # Th√™m b∆∞·ªõc x√°c nh·∫≠n ƒë·ªÉ an to√†n
            confirm = prompt_for_text(f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·∫£n ph·∫©m '{pid}'? (y/n)", default='n')
            if confirm.lower() == 'y':
                product_mgr.delete_product(pid)
                print(f"‚úÖ ƒê√£ x√≥a s·∫£n ph·∫©m '{pid}'.")
            else:
                print("H·ªßy thao t√°c x√≥a.")
        except ValueError as e:
            print(f"‚ùå L·ªói: {e}")

    def _handle_search_product():
        print("\n--- 1.4 T√¨m ki·∫øm s·∫£n ph·∫©m ---")
        kw = prompt_for_text("Nh·∫≠p t·ª´ kh√≥a (m√£/t√™n/danh m·ª•c)")
        if not kw: return
        field = prompt_for_text("T√¨m theo tr∆∞·ªùng (product_id/name/category)", "name")
        try:
            results = product_mgr.search_products(kw, field=field)
            print_products_table(results)
        except ValueError as e:
            print(f"‚ùå L·ªói: {e}")

    def _handle_add_category():
        print("\n--- 1.5 Th√™m danh m·ª•c m·ªõi ---")
        cat_name = prompt_for_text("T√™n danh m·ª•c m·ªõi")
        if not cat_name: return
        try:
            category_mgr.add_category(cat_name)
            print(f"‚úÖ Th√™m danh m·ª•c '{cat_name}' th√†nh c√¥ng.")
        except ValueError as e:
            print(f"‚ùå L·ªói: {e}")

    def _handle_transaction(trans_type: str):
        is_import = trans_type.upper() == "IMPORT"
        action_text = "nh·∫≠p" if is_import else "xu·∫•t"
        print(f"\n--- 2.{1 if is_import else 2} {action_text.capitalize()} kho ---")
        pid = prompt_for_text("M√£ SP")
        if not pid: return
        try:
            product_mgr.get_product(pid)  # Ki·ªÉm tra SP t·ªìn t·∫°i
            qty = prompt_for_int(f"S·ªë l∆∞·ª£ng {action_text}")
            if qty <= 0:
                print("‚ùóÔ∏è S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0.")
                return
            note = prompt_for_text("Ghi ch√∫ (t√πy ch·ªçn)", default="")
            transaction_mgr.add_transaction(pid, trans_type.upper(), qty, note=note)
            print(f"‚úÖ {action_text.capitalize()} kho th√†nh c√¥ng.")
        except ValueError as e:
            print(f"‚ùå L·ªói: {e}")

    # ===============================================
    # === C√ÅC MENU CH·ª®C NƒÇNG
    # ===============================================

    def menu_quan_ly_san_pham():
        menu_map = {
            "1": ("Th√™m s·∫£n ph·∫©m m·ªõi", _handle_add_product),
            "2": ("S·ª≠a th√¥ng tin s·∫£n ph·∫©m", _handle_update_product),
            "3": ("X√≥a s·∫£n ph·∫©m", _handle_delete_product),
            "4": ("T√¨m ki·∫øm s·∫£n ph·∫©m", _handle_search_product),
            "5": ("Th√™m danh m·ª•c m·ªõi", _handle_add_category),
            "0": ("Quay l·∫°i", None)
        }
        while True:
            print("\n=== 1. QU·∫¢N L√ù S·∫¢N PH·∫®M ===")
            for key, (text, _) in menu_map.items(): print(f"{key}. {text}")
            choice = input("Ch·ªçn: ").strip()
            if choice == "0": break
            action = menu_map.get(choice)
            if action and action[1]:
                action[1]()
            else:
                print("‚ùóÔ∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")

    def menu_nhap_xuat_kho():
        while True:
            print("\n=== 2. NH·∫¨P/XU·∫§T KHO ===")
            print("1. Nh·∫≠p kho")
            print("2. Xu·∫•t kho (b√°n h√†ng)")
            print("3. L·ªãch s·ª≠ giao d·ªãch")
            print("0. Quay l·∫°i")
            c = input("Ch·ªçn: ").strip()
            if c == "1":
                _handle_transaction("IMPORT")
            elif c == "2":
                _handle_transaction("EXPORT")
            elif c == "3":
                print_transactions_table(transaction_mgr.list_transactions())
            elif c == "0":
                break
            else:
                print("‚ùóÔ∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")

    def menu_bao_cao_thong_ke():
        while True:
            print("\n=== 3. B√ÅO C√ÅO V√Ä TH·ªêNG K√ä ===")
            print("1. Xem danh s√°ch t·ªìn kho")
            print("2. Xem c·∫£nh b√°o h·∫øt h√†ng/s·∫Øp h·∫øt h√†ng")
            print("3. Xem b√°o c√°o doanh thu theo th√°ng")
            print("0. Quay l·∫°i")
            c = input("Ch·ªçn: ").strip()
            if c == "1":
                print_products_table(product_mgr.list_products())
            elif c == "2":
                alerts = generate_low_stock_alerts(product_mgr, transaction_mgr)
                print(format_alerts_text(alerts))
                if HAS_OPENPYXL and input("B·∫°n c√≥ mu·ªën xu·∫•t file Excel chi ti·∫øt kh√¥ng? (y/n): ").lower() == 'y':
                    try:
                        out_path = REPORTS_DIR / f"low_stock_alert_{datetime.now().strftime('%Y%m%d')}.xlsx"
                        export_alerts_xlsx(alerts, str(out_path))
                        print(f"‚úÖ ƒê√£ xu·∫•t b√°o c√°o ra file: {out_path}")
                    except Exception as e:
                        print(f"‚ùå L·ªói khi xu·∫•t file: {e}")
            elif c == "3":
                now = datetime.now(VN_TZ)
                y = prompt_for_int("Nh·∫≠p nƒÉm (YYYY)", default=now.year)
                m = prompt_for_int("Nh·∫≠p th√°ng (1-12)", default=now.month)
                try:
                    summary = compute_financial_summary(product_mgr, transaction_mgr, month=m, year=y,
                                                        out_dir=REPORTS_DIR)
                    print(format_financial_summary_text(summary))
                    print(f"‚úÖ ƒê√£ xu·∫•t file chi ti·∫øt: {REPORTS_DIR}/sales_summary_{m:02d}_{y}.csv")
                except Exception as e:
                    print(f"‚ùå L·ªói khi t·∫°o b√°o c√°o: {e}")
            elif c == "0":
                break
            else:
                print("‚ùóÔ∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")

    def menu_xuat_du_lieu():
        print("\n=== 4. XU·∫§T D·ªÆ LI·ªÜU ===")
        try:
            p_out = prompt_for_text("ƒê∆∞·ªùng d·∫´n xu·∫•t file s·∫£n ph·∫©m (json/csv)",
                                    str(REPORTS_DIR / "products_export.json"))

            # === D√íNG QUAN TR·ªåNG: ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i ===
            Path(p_out).parent.mkdir(parents=True, exist_ok=True)

            if Path(p_out).suffix == '.csv':
                product_mgr.export_csv(p_out)
            else:
                product_mgr.export_json(p_out)

            t_out = prompt_for_text("ƒê∆∞·ªùng d·∫´n xu·∫•t file giao d·ªãch (csv)", str(REPORTS_DIR / "transactions_export.csv"))

            # === D√íNG QUAN TR·ªåNG: ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i ===
            Path(t_out).parent.mkdir(parents=True, exist_ok=True)

            transaction_mgr.export_transactions(t_out)

            print(f"‚úÖ ƒê√£ xu·∫•t d·ªØ li·ªáu ra c√°c file:\n- {p_out}\n- {t_out}")
        except Exception as e:
            print(f"‚ùå L·ªói xu·∫•t d·ªØ li·ªáu: {e}")

    # ===============================================
    # === H√ÄM MAIN (ƒêI·ªÇM B·∫ÆT ƒê·∫¶U C·ª¶A APP)
    # ===============================================
    def main():
        menu_map = {
            "1": ("Qu·∫£n l√Ω s·∫£n ph·∫©m", menu_quan_ly_san_pham),
            "2": ("Nh·∫≠p/Xu·∫•t kho", menu_nhap_xuat_kho),
            "3": ("B√°o c√°o v√† th·ªëng k√™", menu_bao_cao_thong_ke),
            "4": ("Xu·∫•t d·ªØ li·ªáu", menu_xuat_du_lieu),
            "5": ("Tho√°t", None)
        }
        while True:
            print("\n========== üì¶ QU·∫¢N L√ù KHO H√ÄNG MINI-MART üì¶ ==========")
            for key, (text, _) in menu_map.items():
                print(f"{key}. {text}")

            choice = input("Ch·ªçn ch·ª©c nƒÉng: ").strip()

            if choice == "5":
                print("üëã T·∫°m bi·ªát!")
                break

            action = menu_map.get(choice)
            if action and action[1]:
                action[1]()
            else:
                print("‚ùóÔ∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn t·ª´ 1 ƒë·∫øn 5.")

    # --- Ch·∫°y ·ª©ng d·ª•ng ---
    main()


# ===============================================
# === ENTRY POINT C·ª¶A SCRIPT
# ===============================================
if __name__ == "__main__":
    try:
        # B∆∞·ªõc 1: Ki·ªÉm tra c√°c module c·∫ßn thi·∫øt c√≥ th·ªÉ ƒë∆∞·ª£c import kh√¥ng
        from src.inventory.product_manager import ProductManager
        from src.inventory.category_manager import CategoryManager
        from src.sales.transaction_manager import TransactionManager
        from src.report_and_sreach.report import generate_low_stock_alerts
        from src.utils.time_zone import VN_TZ

        # B∆∞·ªõc 2: N·∫øu t·∫•t c·∫£ import th√†nh c√¥ng, g·ªçi h√†m ƒë·ªÉ ch·∫°y to√†n b·ªô ·ª©ng d·ª•ng
        run_cli_app()

    except ImportError:
        print("‚ùå L·ªñI NGHI√äM TR·ªåNG: KH√îNG T√åM TH·∫§Y MODULE C·ª¶A D·ª∞ √ÅN.")
        print("Vui l√≤ng ƒë·∫£m b·∫£o b·∫°n ƒëang ch·∫°y script n√†y t·ª´ th∆∞ m·ª•c g·ªëc (root) c·ªßa d·ª± √°n.")
        print("V√≠ d·ª•: python -m src.cli.cli_vn")
        # In ra l·ªói chi ti·∫øt ƒë·ªÉ g·ª° l·ªói
        traceback.print_exc()
        sys.exit(1)
    except Exception as e:
        print(f"üí• ƒê√£ x·∫£y ra m·ªôt l·ªói kh√¥ng mong mu·ªën: {e}")
        traceback.print_exc()
        sys.exit(1)