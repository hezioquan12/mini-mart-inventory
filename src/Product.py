import csv
import json
from datetime import datetime
from typing import List


class Product:
    def __init__(self, product_id: str, name: str, category: str,
                 cost_price: float, sell_price: float,
                 stock_quantity: int, min_threshold: int, unit: str,
                 created_date: str = None, last_updated: str = None):
        self.product_id = product_id  # M√£ s·∫£n ph·∫©m
        self.name = name  # T√™n s·∫£n ph·∫©m
        self.category = category  # Danh m·ª•c s·∫£n ph·∫©m
        self.cost_price = cost_price  # Gi√° v·ªën (gi√° nh·∫≠p)
        self.sell_price = sell_price  # Gi√° b√°n
        self.stock_quantity = stock_quantity  # S·ªë l∆∞·ª£ng t·ªìn kho
        self.min_threshold = min_threshold  # Ng∆∞·ª°ng t·ªìn kho t·ªëi thi·ªÉu (ƒë·ªÉ c·∫£nh b√°o khi s·∫Øp h·∫øt h√†ng)
        self.unit = unit  # ƒê∆°n v·ªã t√≠nh (c√°i, kg, h·ªôp‚Ä¶)
        self.created_date = created_date or datetime.now().strftime("%d/%m/%Y")
        # Ng√†y t·∫°o s·∫£n ph·∫©m (n·∫øu kh√¥ng truy·ªÅn v√†o th√¨ l·∫•y ng√†y hi·ªán t·∫°i)

        self.last_updated = last_updated or datetime.now().strftime("%d/%m/%Y %H:%M")
        # Ng√†y/gi·ªù c·∫≠p nh·∫≠t g·∫ßn nh·∫•t (n·∫øu kh√¥ng truy·ªÅn th√¨ l·∫•y th·ªùi ƒëi·ªÉm hi·ªán t·∫°i)

    def update_stock(self, quantity: int, transaction_type: str):
        """C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho"""
        if transaction_type == "nh·∫≠p":
            self.stock_quantity += quantity
        elif transaction_type == "xu·∫•t":
            if quantity > self.stock_quantity:
                raise ValueError(f"Kh√¥ng ƒë·ªß h√†ng! T·ªìn kho: {self.stock_quantity}")
            self.stock_quantity -= quantity
        else:
            raise ValueError("transaction_type ph·∫£i l√† 'nh·∫≠p' ho·∫∑c 'xu·∫•t'")
        self.last_updated = datetime.now().strftime("%d/%m/%Y %H:%M")

    def get_stock_status(self):
        """Tr·∫£ v·ªÅ tr·∫°ng th√°i t·ªìn kho"""
        if self.stock_quantity == 0:
            return "üö® H·∫øt h√†ng"
        elif self.stock_quantity <= self.min_threshold:
            return "‚ö†Ô∏è S·∫Øp h·∫øt"
        else:
            return "B√¨nh th∆∞·ªùng"

    def to_dict(self):
        """Chuy·ªÉn object th√†nh dictionary ƒë·ªÉ ghi CSV"""
        return {
            "product_id": self.product_id,
            "name": self.name,
            "category": self.category,
            "cost_price": self.cost_price,
            "sell_price": self.sell_price,
            "stock_quantity": self.stock_quantity,
            "min_threshold": self.min_threshold,
            "unit": self.unit,
            "created_date": self.created_date,
            "last_updated": self.last_updated
        }


class ProductManager:
    PRODUCTS_FILE = "products.csv"
    CATEGORIES_FILE = "categories.json"

    def __init__(self):
        self.products: List[Product] = self.load_products()
        self.categories = self.load_categories()

    def load_products(self) -> List[Product]:
        """ƒê·ªçc danh s√°ch s·∫£n ph·∫©m t·ª´ CSV"""
        products = []
        try:
            with open(self.PRODUCTS_FILE, "r", encoding="utf-8") as f:
                reader = csv.DictReader(f)
                for row in reader:
                    products.append(Product(
                        product_id=row["product_id"],
                        name=row["name"],
                        category=row["category"],
                        cost_price=float(row["cost_price"]),
                        sell_price=float(row["sell_price"]),
                        stock_quantity=int(row["stock_quantity"]),
                        min_threshold=int(row["min_threshold"]),
                        unit=row["unit"],
                        created_date=row["created_date"],
                        last_updated=row["last_updated"]
                    ))
        except FileNotFoundError:
            print("‚ö†Ô∏è Ch∆∞a c√≥ file products.csv, s·∫Ω t·∫°o m·ªõi sau.")
        return products

    def save_products(self):
        """Ghi danh s√°ch s·∫£n ph·∫©m ra CSV"""
        fieldnames = ["product_id", "name", "category", "cost_price", "sell_price",
                      "stock_quantity", "min_threshold", "unit", "created_date", "last_updated"]
        with open(self.PRODUCTS_FILE, "w", newline="", encoding="utf-8") as f:
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writeheader()
            for p in self.products:
                writer.writerow(p.to_dict())

    def load_categories(self):
        """ƒê·ªçc danh m·ª•c s·∫£n ph·∫©m t·ª´ JSON"""
        try:
            with open(self.CATEGORIES_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except FileNotFoundError:
            default = ["Th·ª±c ph·∫©m", "ƒê·ªì u·ªëng", "Gia d·ª•ng", "M·ªπ ph·∫©m", "ƒêi·ªán t·ª≠", "Kh√°c"]
            with open(self.CATEGORIES_FILE, "w", encoding="utf-8") as f:
                json.dump(default, f, ensure_ascii=False, indent=2)
            return default

    def generate_product_id(self):
        """Sinh m√£ SP t·ª± ƒë·ªông"""
        if not self.products:
            return "SP001"
        last_id = max(int(p.product_id[2:]) for p in self.products)
        return f"SP{str(last_id + 1).zfill(3)}"

    # CRUD S·∫£n ph·∫©m
    def add_product(self, name: str, category: str, cost_price: float,
                    sell_price: float, stock_quantity: int,
                    min_threshold: int, unit: str) -> Product:
        """Th√™m s·∫£n ph·∫©m m·ªõi"""
        if not name:
            raise ValueError("T√™n s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
        if cost_price <= 0 or sell_price <= 0:
            raise ValueError("Gi√° nh·∫≠p/b√°n ph·∫£i > 0!")
        if stock_quantity < 0 or min_threshold < 0:
            raise ValueError("S·ªë l∆∞·ª£ng/ng∆∞·ª°ng kh√¥ng h·ª£p l·ªá!")

        new_id = self.generate_product_id()
        product = Product(new_id, name, category, cost_price, sell_price,
                          stock_quantity, min_threshold, unit)
        self.products.append(product)
        self.save_products()
        return product

    def update_product(self, product_id: str, **kwargs):
        """S·ª≠a th√¥ng tin s·∫£n ph·∫©m"""
        product = self.find_product(product_id)
        if not product:
            raise ValueError("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m")
        for key, value in kwargs.items():
            if hasattr(product, key):
                setattr(product, key, value)
        product.last_updated = datetime.now().strftime("%d/%m/%Y %H:%M")
        self.save_products()
        return product

    def delete_product(self, product_id: str):
        """X√≥a s·∫£n ph·∫©m"""
        product = self.find_product(product_id)
        if not product:
            raise ValueError("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m")
        self.products.remove(product)
        self.save_products()

    def find_product(self, product_id: str) -> Product:
        """T√¨m s·∫£n ph·∫©m theo m√£"""
        return next((p for p in self.products if p.product_id == product_id), None)

    def search_products(self, keyword: str) -> List[Product]:
        """T√¨m ki·∫øm theo t√™n ho·∫∑c danh m·ª•c"""
        return [p for p in self.products if keyword.lower() in p.name.lower() or keyword.lower() in p.category.lower()]
